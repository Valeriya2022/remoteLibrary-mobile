{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport React, { createRef, useCallback, useEffect, useRef, useState } from \"react\";\nimport { SearchBar } from \"@rneui/themed\";\nimport SearchDropDown from \"./SearchDropDown/SearchDropDown\";\nimport { useKeyboard } from \"./UseKeyboard/UseKeyboard\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function CustomSearchBar(_ref) {\n  var strings = _ref.strings;\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      searchText = _useState2[0],\n      setSearchText = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      focusState = _useState4[0],\n      setFocusState = _useState4[1];\n\n  var inputRef = useRef(null);\n  var keyboardState = useKeyboard({\n    onHide: function onHide() {\n      inputRef.current.blur();\n      setFocusState(false);\n    }\n  });\n\n  var _useState5 = useState([\"apple\", \"banana\", \"cow\", \"dex\", \"zee\", \"orange\", \"air\", \"bottle\"]),\n      _useState6 = _slicedToArray(_useState5, 1),\n      dataSource = _useState6[0];\n\n  return _jsxs(View, {\n    style: styles.searchInputWrapper,\n    children: [_jsx(SearchBar, {\n      ref: inputRef,\n      placeholder: strings.searchPlaceholder,\n      round: true,\n      lightTheme: true,\n      inputStyle: styles.searchInputText,\n      containerStyle: styles.searchInput,\n      inputContainerStyle: styles.searchInputContainer,\n      value: searchText,\n      onFocus: function onFocus() {\n        return setFocusState(true);\n      },\n      autoFocus: false,\n      onChangeText: function onChangeText(text) {\n        return setSearchText(text);\n      }\n    }), focusState && keyboardState && dataSource.length && _jsx(SearchDropDown, {\n      data: dataSource,\n      setInputText: setSearchText\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  searchInputWrapper: {\n    marginTop: 8\n  },\n  searchInput: {\n    backgroundColor: \"#fff\",\n    borderWidth: 0,\n    padding: 0\n  },\n  searchInputText: {\n    fontSize: 13\n  },\n  searchInputContainer: {\n    padding: 0,\n    backgroundColor: \"white\"\n  }\n});","map":{"version":3,"sources":["C:/Users/valeriya.nikiforova/Documents/UCA/Senior/FYP/remoteLibrary-master/components/Header/CustomSearchBar/CustomSearchBar.js"],"names":["React","createRef","useCallback","useEffect","useRef","useState","SearchBar","SearchDropDown","useKeyboard","CustomSearchBar","strings","searchText","setSearchText","focusState","setFocusState","inputRef","keyboardState","onHide","current","blur","dataSource","styles","searchInputWrapper","searchPlaceholder","searchInputText","searchInput","searchInputContainer","text","length","StyleSheet","create","marginTop","backgroundColor","borderWidth","padding","fontSize"],"mappings":";;;;;AACA,OAAOA,KAAP,IACEC,SADF,EAEEC,WAFF,EAGEC,SAHF,EAIEC,MAJF,EAKEC,QALF,QAMO,OANP;AAOA,SAASC,SAAT,QAA0B,eAA1B;AACA,OAAOC,cAAP;AACA,SAASC,WAAT;;;AAEA,eAAe,SAASC,eAAT,OAAsC;AAAA,MAAXC,OAAW,QAAXA,OAAW;;AACnD,kBAAoCL,QAAQ,CAAC,EAAD,CAA5C;AAAA;AAAA,MAAOM,UAAP;AAAA,MAAmBC,aAAnB;;AACA,mBAAoCP,QAAQ,CAAC,KAAD,CAA5C;AAAA;AAAA,MAAOQ,UAAP;AAAA,MAAmBC,aAAnB;;AACA,MAAMC,QAAQ,GAAGX,MAAM,CAAC,IAAD,CAAvB;AACA,MAAMY,aAAa,GAAGR,WAAW,CAAC;AAChCS,IAAAA,MAAM,EAAE,kBAAM;AACZF,MAAAA,QAAQ,CAACG,OAAT,CAAiBC,IAAjB;AACAL,MAAAA,aAAa,CAAC,KAAD,CAAb;AACD;AAJ+B,GAAD,CAAjC;;AAMA,mBAAqBT,QAAQ,CAAC,CAC5B,OAD4B,EAE5B,QAF4B,EAG5B,KAH4B,EAI5B,KAJ4B,EAK5B,KAL4B,EAM5B,QAN4B,EAO5B,KAP4B,EAQ5B,QAR4B,CAAD,CAA7B;AAAA;AAAA,MAAOe,UAAP;;AAUA,SACE,MAAC,IAAD;AAAM,IAAA,KAAK,EAAEC,MAAM,CAACC,kBAApB;AAAA,eACE,KAAC,SAAD;AACE,MAAA,GAAG,EAAEP,QADP;AAEE,MAAA,WAAW,EAAEL,OAAO,CAACa,iBAFvB;AAGE,MAAA,KAAK,MAHP;AAIE,MAAA,UAAU,MAJZ;AAKE,MAAA,UAAU,EAAEF,MAAM,CAACG,eALrB;AAME,MAAA,cAAc,EAAEH,MAAM,CAACI,WANzB;AAOE,MAAA,mBAAmB,EAAEJ,MAAM,CAACK,oBAP9B;AAQE,MAAA,KAAK,EAAEf,UART;AASE,MAAA,OAAO,EAAE;AAAA,eAAMG,aAAa,CAAC,IAAD,CAAnB;AAAA,OATX;AAUE,MAAA,SAAS,EAAE,KAVb;AAWE,MAAA,YAAY,EAAE,sBAACa,IAAD;AAAA,eAAUf,aAAa,CAACe,IAAD,CAAvB;AAAA;AAXhB,MADF,EAcGd,UAAU,IAAIG,aAAd,IAA+BI,UAAU,CAACQ,MAA1C,IACC,KAAC,cAAD;AAAgB,MAAA,IAAI,EAAER,UAAtB;AAAkC,MAAA,YAAY,EAAER;AAAhD,MAfJ;AAAA,IADF;AAoBD;AAED,IAAMS,MAAM,GAAGQ,UAAU,CAACC,MAAX,CAAkB;AAC/BR,EAAAA,kBAAkB,EAAE;AAClBS,IAAAA,SAAS,EAAE;AADO,GADW;AAI/BN,EAAAA,WAAW,EAAE;AACXO,IAAAA,eAAe,EAAE,MADN;AAEXC,IAAAA,WAAW,EAAE,CAFF;AAGXC,IAAAA,OAAO,EAAE;AAHE,GAJkB;AAS/BV,EAAAA,eAAe,EAAE;AACfW,IAAAA,QAAQ,EAAE;AADK,GATc;AAY/BT,EAAAA,oBAAoB,EAAE;AAAEQ,IAAAA,OAAO,EAAE,CAAX;AAAcF,IAAAA,eAAe,EAAE;AAA/B;AAZS,CAAlB,CAAf","sourcesContent":["import { View, Text, StyleSheet, TextInput } from \"react-native\";\r\nimport React, {\r\n  createRef,\r\n  useCallback,\r\n  useEffect,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\nimport { SearchBar } from \"@rneui/themed\";\r\nimport SearchDropDown from \"./SearchDropDown/SearchDropDown\";\r\nimport { useKeyboard } from \"./UseKeyboard/UseKeyboard\";\r\n\r\nexport default function CustomSearchBar({ strings }) {\r\n  const [searchText, setSearchText] = useState(\"\");\r\n  const [focusState, setFocusState] = useState(false);\r\n  const inputRef = useRef(null);\r\n  const keyboardState = useKeyboard({\r\n    onHide: () => {\r\n      inputRef.current.blur();\r\n      setFocusState(false);\r\n    },\r\n  });\r\n  const [dataSource] = useState([\r\n    \"apple\",\r\n    \"banana\",\r\n    \"cow\",\r\n    \"dex\",\r\n    \"zee\",\r\n    \"orange\",\r\n    \"air\",\r\n    \"bottle\",\r\n  ]);\r\n  return (\r\n    <View style={styles.searchInputWrapper}>\r\n      <SearchBar\r\n        ref={inputRef}\r\n        placeholder={strings.searchPlaceholder}\r\n        round\r\n        lightTheme\r\n        inputStyle={styles.searchInputText}\r\n        containerStyle={styles.searchInput}\r\n        inputContainerStyle={styles.searchInputContainer}\r\n        value={searchText}\r\n        onFocus={() => setFocusState(true)}\r\n        autoFocus={false}\r\n        onChangeText={(text) => setSearchText(text)}\r\n      />\r\n      {focusState && keyboardState && dataSource.length && (\r\n        <SearchDropDown data={dataSource} setInputText={setSearchText} />\r\n      )}\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  searchInputWrapper: {\r\n    marginTop: 8,\r\n  },\r\n  searchInput: {\r\n    backgroundColor: \"#fff\",\r\n    borderWidth: 0,\r\n    padding: 0,\r\n  },\r\n  searchInputText: {\r\n    fontSize: 13,\r\n  },\r\n  searchInputContainer: { padding: 0, backgroundColor: \"white\" },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}