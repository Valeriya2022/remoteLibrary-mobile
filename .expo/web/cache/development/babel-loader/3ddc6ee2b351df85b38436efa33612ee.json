{"ast":null,"code":"import mergeOptions from 'merge-options';\nvar merge = mergeOptions.bind({\n  concatArrays: true,\n  ignoreUndefined: true\n});\n\nfunction mergeLocalStorageItem(key, value) {\n  var oldValue = window.localStorage.getItem(key);\n\n  if (oldValue) {\n    var oldObject = JSON.parse(oldValue);\n    var newObject = JSON.parse(value);\n    var nextValue = JSON.stringify(merge(oldObject, newObject));\n    window.localStorage.setItem(key, nextValue);\n  } else {\n    window.localStorage.setItem(key, value);\n  }\n}\n\nfunction createPromise(getValue, callback) {\n  return new Promise(function (resolve, reject) {\n    try {\n      var value = getValue();\n      callback === null || callback === void 0 ? void 0 : callback(null, value);\n      resolve(value);\n    } catch (err) {\n      callback === null || callback === void 0 ? void 0 : callback(err);\n      reject(err);\n    }\n  });\n}\n\nfunction createPromiseAll(promises, callback, processResult) {\n  return Promise.all(promises).then(function (result) {\n    var _processResult;\n\n    var value = (_processResult = processResult === null || processResult === void 0 ? void 0 : processResult(result)) !== null && _processResult !== void 0 ? _processResult : null;\n    callback === null || callback === void 0 ? void 0 : callback(null, value);\n    return Promise.resolve(value);\n  }, function (errors) {\n    callback === null || callback === void 0 ? void 0 : callback(errors);\n    return Promise.reject(errors);\n  });\n}\n\nvar AsyncStorage = {\n  getItem: function getItem(key, callback) {\n    return createPromise(function () {\n      return window.localStorage.getItem(key);\n    }, callback);\n  },\n  setItem: function setItem(key, value, callback) {\n    return createPromise(function () {\n      return window.localStorage.setItem(key, value);\n    }, callback);\n  },\n  removeItem: function removeItem(key, callback) {\n    return createPromise(function () {\n      return window.localStorage.removeItem(key);\n    }, callback);\n  },\n  mergeItem: function mergeItem(key, value, callback) {\n    return createPromise(function () {\n      return mergeLocalStorageItem(key, value);\n    }, callback);\n  },\n  clear: function clear(callback) {\n    return createPromise(function () {\n      return window.localStorage.clear();\n    }, callback);\n  },\n  getAllKeys: function getAllKeys(callback) {\n    return createPromise(function () {\n      var numberOfKeys = window.localStorage.length;\n      var keys = [];\n\n      for (var i = 0; i < numberOfKeys; i += 1) {\n        var key = window.localStorage.key(i) || '';\n        keys.push(key);\n      }\n\n      return keys;\n    }, callback);\n  },\n  flushGetRequests: function flushGetRequests() {\n    return undefined;\n  },\n  multiGet: function multiGet(keys, callback) {\n    var promises = keys.map(function (key) {\n      return AsyncStorage.getItem(key);\n    });\n\n    var processResult = function processResult(result) {\n      return result.map(function (value, i) {\n        return [keys[i], value];\n      });\n    };\n\n    return createPromiseAll(promises, callback, processResult);\n  },\n  multiSet: function multiSet(keyValuePairs, callback) {\n    var promises = keyValuePairs.map(function (item) {\n      return AsyncStorage.setItem(item[0], item[1]);\n    });\n    return createPromiseAll(promises, callback);\n  },\n  multiRemove: function multiRemove(keys, callback) {\n    var promises = keys.map(function (key) {\n      return AsyncStorage.removeItem(key);\n    });\n    return createPromiseAll(promises, callback);\n  },\n  multiMerge: function multiMerge(keyValuePairs, callback) {\n    var promises = keyValuePairs.map(function (item) {\n      var _AsyncStorage$mergeIt, _AsyncStorage$mergeIt2;\n\n      return (_AsyncStorage$mergeIt = (_AsyncStorage$mergeIt2 = AsyncStorage.mergeItem) === null || _AsyncStorage$mergeIt2 === void 0 ? void 0 : _AsyncStorage$mergeIt2.call(AsyncStorage, item[0], item[1])) !== null && _AsyncStorage$mergeIt !== void 0 ? _AsyncStorage$mergeIt : Promise.reject('Not implemented');\n    });\n    return createPromiseAll(promises, callback);\n  }\n};\nexport default AsyncStorage;","map":{"version":3,"mappings":"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","names":["mergeOptions","merge","bind","concatArrays","ignoreUndefined","mergeLocalStorageItem","key","value","oldValue","window","localStorage","getItem","oldObject","JSON","parse","newObject","nextValue","stringify","setItem","createPromise","getValue","callback","Promise","resolve","reject","err","createPromiseAll","promises","processResult","all","then","result","errors","AsyncStorage","removeItem","mergeItem","clear","getAllKeys","numberOfKeys","length","keys","i","push","flushGetRequests","undefined","multiGet","map","multiSet","keyValuePairs","item","multiRemove","multiMerge","_AsyncStorage$mergeIt2"],"sources":["AsyncStorage.ts"],"sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// @ts-ignore Cannot find module 'merge-options' or its corresponding type declarations\nimport mergeOptions from 'merge-options';\nimport type {\n  AsyncStorageStatic,\n  MultiCallback,\n  MultiGetCallback,\n} from './types';\n\nconst merge = mergeOptions.bind({\n  concatArrays: true,\n  ignoreUndefined: true,\n});\n\nfunction mergeLocalStorageItem(key: string, value: string) {\n  const oldValue = window.localStorage.getItem(key);\n  if (oldValue) {\n    const oldObject = JSON.parse(oldValue);\n    const newObject = JSON.parse(value);\n    const nextValue = JSON.stringify(merge(oldObject, newObject));\n    window.localStorage.setItem(key, nextValue);\n  } else {\n    window.localStorage.setItem(key, value);\n  }\n}\n\nfunction createPromise<Result, Callback extends Function>(\n  getValue: () => Result,\n  callback?: Callback\n): Promise<Result> {\n  return new Promise((resolve, reject) => {\n    try {\n      const value = getValue();\n      callback?.(null, value);\n      resolve(value);\n    } catch (err) {\n      callback?.(err);\n      reject(err);\n    }\n  });\n}\n\nfunction createPromiseAll<ReturnType, Result, ResultProcessor extends Function>(\n  promises: Promise<Result>[],\n  callback?: MultiCallback | MultiGetCallback,\n  processResult?: ResultProcessor\n): Promise<ReturnType> {\n  return Promise.all(promises).then(\n    (result) => {\n      const value = processResult?.(result) ?? null;\n      callback?.(null, value);\n      return Promise.resolve(value);\n    },\n    (errors) => {\n      callback?.(errors);\n      return Promise.reject(errors);\n    }\n  );\n}\n\nconst AsyncStorage: AsyncStorageStatic = {\n  /**\n   * Fetches `key` value.\n   */\n  getItem: (key, callback) => {\n    return createPromise(() => window.localStorage.getItem(key), callback);\n  },\n\n  /**\n   * Sets `value` for `key`.\n   */\n  setItem: (key, value, callback) => {\n    return createPromise(\n      () => window.localStorage.setItem(key, value),\n      callback\n    );\n  },\n\n  /**\n   * Removes a `key`\n   */\n  removeItem: (key, callback) => {\n    return createPromise(() => window.localStorage.removeItem(key), callback);\n  },\n\n  /**\n   * Merges existing value with input value, assuming they are stringified JSON.\n   */\n  mergeItem: (key, value, callback) => {\n    return createPromise(() => mergeLocalStorageItem(key, value), callback);\n  },\n\n  /**\n   * Erases *all* AsyncStorage for the domain.\n   */\n  clear: (callback) => {\n    return createPromise(() => window.localStorage.clear(), callback);\n  },\n\n  /**\n   * Gets *all* keys known to the app, for all callers, libraries, etc.\n   */\n  getAllKeys: (callback) => {\n    return createPromise(() => {\n      const numberOfKeys = window.localStorage.length;\n      const keys: string[] = [];\n      for (let i = 0; i < numberOfKeys; i += 1) {\n        const key = window.localStorage.key(i) || '';\n        keys.push(key);\n      }\n      return keys;\n    }, callback);\n  },\n\n  /**\n   * (stub) Flushes any pending requests using a single batch call to get the data.\n   */\n  flushGetRequests: () => undefined,\n\n  /**\n   * multiGet resolves to an array of key-value pair arrays that matches the\n   * input format of multiSet.\n   *\n   *   multiGet(['k1', 'k2']) -> [['k1', 'val1'], ['k2', 'val2']]\n   */\n  multiGet: (keys, callback) => {\n    const promises = keys.map((key) => AsyncStorage.getItem(key));\n    const processResult = (result: string[]) =>\n      result.map((value, i) => [keys[i], value]);\n    return createPromiseAll(promises, callback, processResult);\n  },\n\n  /**\n   * Takes an array of key-value array pairs.\n   *   multiSet([['k1', 'val1'], ['k2', 'val2']])\n   */\n  multiSet: (keyValuePairs, callback) => {\n    const promises = keyValuePairs.map((item) =>\n      AsyncStorage.setItem(item[0], item[1])\n    );\n    return createPromiseAll(promises, callback);\n  },\n\n  /**\n   * Delete all the keys in the `keys` array.\n   */\n  multiRemove: (keys, callback) => {\n    const promises = keys.map((key) => AsyncStorage.removeItem(key));\n    return createPromiseAll(promises, callback);\n  },\n\n  /**\n   * Takes an array of key-value array pairs and merges them with existing\n   * values, assuming they are stringified JSON.\n   *\n   *   multiMerge([['k1', 'val1'], ['k2', 'val2']])\n   */\n  multiMerge: (keyValuePairs, callback) => {\n    const promises = keyValuePairs.map(\n      (item) =>\n        AsyncStorage.mergeItem?.(item[0], item[1]) ??\n        Promise.reject('Not implemented')\n    );\n    return createPromiseAll(promises, callback);\n  },\n};\n\nexport default AsyncStorage;\n"]},"metadata":{},"sourceType":"module"}